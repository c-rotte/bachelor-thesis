@inproceedings{cost_performance_in_modern_data_stores,
	author = {Lomet, David},
	title = {Cost/Performance in Modern Data Stores: How Data Caching Systems Succeed},
	year = {2018},
	isbn = {9781450358538},
	publisher = {Association for Computing Machinery},
	address = {New York, NY, USA},
	url = {https://doi.org/10.1145/3211922.3211927},
	doi = {10.1145/3211922.3211927},
	articleno = {9},
	numpages = {10},
	location = {Houston, Texas},
	series = {DAMON '18}
}
@INPROCEEDINGS{key_value_stores,  author={Zhang, Weitao and Xu, Yinlong and Li, Yongkun and Li, Dinglong},  booktitle={2016 IEEE 22nd International Conference on Parallel and Distributed Systems (ICPADS)},   title={Improving Write Performance of LSMT-Based Key-Value Store},   year={2016},  volume={},  number={},  pages={553-560},  doi={10.1109/ICPADS.2016.0079}}
@article{b_epsilon_tree,
	author    = {Michael A. Bender and
	Martin Farach{-}Colton and
	William Jannen and
	Rob Johnson and
	Bradley C. Kuszmaul and
	Donald E. Porter and
	Jun Yuan and
	Yang Zhan},
	title     = {An Introduction to B{\(\epsilon\)}-trees and Write-Optimization},
	journal   = {login Usenix Mag.},
	volume    = {40},
	number    = {5},
	year      = {2015},
	url       = {https://www.usenix.org/publications/login/oct15/bender},
	timestamp = {Thu, 02 Apr 2020 08:42:08 +0200},
	biburl    = {https://dblp.org/rec/journals/usenix-login/BenderFJJKPY015.bib},
	bibsource = {dblp computer science bibliography, https://dblp.org}
}
@INPROCEEDINGS{performace_evaluation,
	author={Jogi, Vishal Dilipbhai and Sinha, Ashay},  
	booktitle={2016 3rd International Conference on Recent Advances in Information Technology (RAIT)},  
	title={Performance evaluation of MySQL, Cassandra and HBase for heavy write operation},   
	year={2016},  
	volume={},  
	number={},  
	pages={586-590},  
	doi={10.1109/RAIT.2016.7507964}
}
@article{lsm_tree,
	doi = {10.1007/s002360050048},
	url = {https://doi.org/10.1007/s002360050048},
	year = {1996},
	month = jun,
	publisher = {Springer Science and Business Media {LLC}},
	volume = {33},
	number = {4},
	pages = {351--385},
	author = {Patrick O'Neil and Edward Cheng and Dieter Gawlick and Elizabeth O'Neil},
	title = {The log-structured merge-tree ({LSM}-tree)},
	journal = {Acta Informatica}
}
@inproceedings{lsm_b_tree,
	author = {Jain, Varun and Lennon, James and Gupta, Harshita},
	title = {LSM-Trees and B-Trees: The Best of Both Worlds},
	year = {2019},
	isbn = {9781450356435},
	publisher = {Association for Computing Machinery},
	address = {New York, NY, USA},
	url = {https://doi.org/10.1145/3299869.3300097},
	doi = {10.1145/3299869.3300097},
	booktitle = {Proceedings of the 2019 International Conference on Management of Data},
	pages = {1829–1831},
	numpages = {3},
	keywords = {lsm-tree, key-value, data structures, b-tree, nosql, adaptive},
	location = {Amsterdam, Netherlands},
	series = {SIGMOD '19}
}
@online{rocksdb,
	author = {Facebook},
	title = {RocksDB: A Persistent Key-Value Store for Flash and RAM Storage},
	year = {2022},
	publisher = {GitHub},
	journal = {GitHub repository},
	howpublished = {\url{https://github.com/facebook/rocksdb}},
	commit = {a0c63083d36b55d58afe635c44e5820324af05b4},
	url = {https://github.com/facebook/rocksdb},
	urldate = {2022-07-29}
}
@online{leveldb,
	author = {Google},
	title = {LevelDB is a fast key-value storage library written at Google that provides an ordered mapping from string keys to string values.},
	year = {2022},
	publisher = {GitHub},
	journal = {GitHub repository},
	howpublished = {\url{https://github.com/google/leveldb}},
	commit = {aa5479bbf47e9df86e0afbb89e6246085f22cdd4},
	url = {https://github.com/google/leveldb},
	urldate = {2022-07-29}
}
@article{seq_rand,
	title={Memory matters},
	author={Kaldewey, Tim and Blas, AD and Hagen, Jeff and Sedlar, Eric and Brandt, Scott A},
	journal={RTSS’06},
	year={2008}
}
@article{hash_index,
	author = {Hu, Daokun and Chen, Zhiwen and Wu, Jianbing and Sun, Jianhua and Chen, Hao},
	title = {Persistent Memory Hash Indexes: An Experimental Evaluation},
	year = {2021},
	issue_date = {January 2021},
	publisher = {VLDB Endowment},
	volume = {14},
	number = {5},
	issn = {2150-8097},
	url = {https://doi.org/10.14778/3446095.3446101},
	doi = {10.14778/3446095.3446101},
	abstract = {Persistent memory (PM) is increasingly being leveraged to build hash-based indexing structures featuring cheap persistence, high performance, and instant recovery, especially with the recent release of Intel Optane DC Persistent Memory Modules. However, most of them are evaluated on DRAM-based emulators with unreal assumptions, or focus on the evaluation of specific metrics with important properties sidestepped. Thus, it is essential to understand how well the proposed hash indexes perform on real PM and how they differentiate from each other if a wider range of performance metrics are considered.To this end, this paper provides a comprehensive evaluation of persistent hash tables. In particular, we focus on the evaluation of six state-of-the-art hash tables including Level hashing, CCEH, Dash, PCLHT, Clevel, and SOFT, with real PM hardware. Our evaluation was conducted using a unified benchmarking framework and representative workloads. Besides characterizing common performance properties, we also explore how hardware configurations (such as PM bandwidth, CPU instructions, and NUMA) affect the performance of PM-based hash tables. With our in-depth analysis, we identify design trade-offs and good paradigms in prior arts, and suggest desirable optimizations and directions for the future development of PM-based hash tables.},
	journal = {Proc. VLDB Endow.},
	month = {jan},
	pages = {785–798},
	numpages = {14}
}
@book{i_heart_logs,
	title={I Heart Logs: Event Data, Stream Processing, and Data Integration},
	author={Kreps, J.},
	isbn={9781491909331},
	url={https://books.google.de/books?id=N9iYBAAAQBAJ},
	year={2014},
	publisher={O'Reilly Media}
}
@unpublished{log_presentation,
	title= {Power of the Log: LSM and Append Only Data Structures},
	author = {Stopford, B.},
	year = {2017},
	note= {QCon},
	URL= {https://www.infoq.com/presentations/lsm-append-data-structures/},
}
@article{bloom_filter,
	author = {Bloom, Burton H.},
	title = {Space/Time Trade-Offs in Hash Coding with Allowable Errors},
	year = {1970},
	issue_date = {July 1970},
	publisher = {Association for Computing Machinery},
	address = {New York, NY, USA},
	volume = {13},
	number = {7},
	issn = {0001-0782},
	url = {https://doi.org/10.1145/362686.362692},
	doi = {10.1145/362686.362692},
	abstract = {In this paper trade-offs among certain computational factors in hash coding are analyzed. The paradigm problem considered is that of testing a series of messages one-by-one for membership in a given set of messages. Two new hash-coding methods are examined and compared with a particular conventional hash-coding method. The computational factors considered are the size of the hash area (space), the time required to identify a message as a nonmember of the given set (reject time), and an allowable error frequency.The new methods are intended to reduce the amount of space required to contain the hash-coded information from that associated with conventional methods. The reduction in space is accomplished by exploiting the possibility that a small fraction of errors of commission may be tolerable in some applications, in particular, applications in which a large amount of data is involved and a core resident hash area is consequently not feasible using conventional methods.In such applications, it is envisaged that overall performance could be improved by using a smaller core resident hash area in conjunction with the new methods and, when necessary, by using some secondary and perhaps time-consuming test to “catch” the small fraction of errors associated with the new methods. An example is discussed which illustrates possible areas of application for the new methods.Analysis of the paradigm problem demonstrates that allowing a small number of test messages to be falsely identified as members of the given set will permit a much smaller hash area to be used without increasing reject time.},
	journal = {Commun. ACM},
	month = {jul},
	pages = {422–426},
	numpages = {5},
	keywords = {hash coding, storage layout, scatter storage, retrieval efficiency, storage efficiency, retrieval trade-offs, hash addressing, searching}
}
@article{lsm_data_stores_leveldb_rocksdb,
	author = {Dong, Siying and Kryczka, Andrew and Jin, Yanqin and Stumm, Michael},
	title = {RocksDB: Evolution of Development Priorities in a Key-Value Store Serving Large-Scale Applications},
	year = {2021},
	issue_date = {November 2021},
	publisher = {Association for Computing Machinery},
	address = {New York, NY, USA},
	volume = {17},
	number = {4},
	issn = {1553-3077},
	url = {https://doi.org/10.1145/3483840},
	doi = {10.1145/3483840},
	abstract = {This article is an eight-year retrospective on development priorities for RocksDB, a key-value store developed at Facebook that targets large-scale distributed systems and that is optimized for Solid State Drives (SSDs). We describe how the priorities evolved over time as a result of hardware trends and extensive experiences running RocksDB at scale in production at a number of organizations: from optimizing write amplification, to space amplification, to CPU utilization. We describe lessons from running large-scale applications, including that resource allocation needs to be managed across different RocksDB instances, that data formats need to remain backward- and forward-compatible to allow incremental software rollouts, and that appropriate support for database replication and backups are needed. Lessons from failure handling taught us that data corruption errors needed to be detected earlier and that data integrity protection mechanisms are needed at every layer of the system. We describe improvements to the key-value interface. We describe a number of efforts that in retrospect proved to be misguided. Finally, we describe a number of open problems that could benefit from future research.},
	journal = {ACM Trans. Storage},
	month = {oct},
	articleno = {26},
	numpages = {32},
	keywords = {compaction, databases, RocksDB, Key-value stores, SSD, large-scale applications}
}
@inproceedings{monkey,
	author = {Dayan, Niv and Athanassoulis, Manos and Idreos, Stratos},
	title = {Monkey: Optimal Navigable Key-Value Store},
	year = {2017},
	isbn = {9781450341974},
	publisher = {Association for Computing Machinery},
	address = {New York, NY, USA},
	url = {https://doi.org/10.1145/3035918.3064054},
	doi = {10.1145/3035918.3064054},
	booktitle = {Proceedings of the 2017 ACM International Conference on Management of Data},
	pages = {79–94},
	numpages = {16},
	keywords = {read/write/memory trade-off, log-structured merge-tree, key-value store, bloom filters, auto-tuning, point queries, point lookups, memory hierarchy, adaptivity, lsm-tree},
	location = {Chicago, Illinois, USA},
	series = {SIGMOD '17}
}
@inproceedings{in-place-updates,
	author = {Hardock, Sergey and Petrov, Ilia and Gottstein, Robert and Buchmann, Alejandro},
	title = {From In-Place Updates to In-Place Appends: Revisiting Out-of-Place Updates on Flash},
	year = {2017},
	isbn = {9781450341974},
	publisher = {Association for Computing Machinery},
	address = {New York, NY, USA},
	url = {https://doi.org/10.1145/3035918.3035958},
	doi = {10.1145/3035918.3035958},
	booktitle = {Proceedings of the 2017 ACM International Conference on Management of Data},
	pages = {1571–1586},
	numpages = {16},
	keywords = {noftl, write-amplification, write_delta, dbms, page-layout, delta-record, native flash, in-page appends, oltp},
	location = {Chicago, Illinois, USA},
	series = {SIGMOD '17}
}
@inproceedings{betrfs,
	author = {William Jannen and Jun Yuan and Yang Zhan and Amogh Akshintala and John Esmet and Yizheng Jiao and Ankur Mittal and Prashant Pandey and Phaneendra Reddy and Leif Walsh and Michael Bender and Martin Farach-Colton and Rob Johnson and Bradley C. Kuszmaul and Donald E. Porter},
	title = {{BetrFS}: A {Right-Optimized} {Write-Optimized} File System},
	booktitle = {13th USENIX Conference on File and Storage Technologies (FAST 15)},
	year = {2015},
	isbn = {978-1-931971-201},
	address = {Santa Clara, CA},
	pages = {301--315},
	url = {https://www.usenix.org/conference/fast15/technical-sessions/presentation/jannen},
	publisher = {USENIX Association},
	month = feb,
}
@article{dam,
	author = {Aggarwal, Alok and Vitter, Jeffrey,S.},
	title = {The Input/Output Complexity of Sorting and Related Problems},
	year = {1988},
	issue_date = {Sept. 1988},
	publisher = {Association for Computing Machinery},
	address = {New York, NY, USA},
	volume = {31},
	number = {9},
	issn = {0001-0782},
	url = {https://doi.org/10.1145/48529.48535},
	doi = {10.1145/48529.48535},
	journal = {Commun. ACM},
	month = {sep},
	pages = {1116–1127},
	numpages = {12}
}
@article{cache-oblivious,
	title={Cache-oblivious algorithms and data structures},
	author={Demaine, Erik D},
	journal={Lecture Notes from the EEF Summer School on Massive Data Sets},
	volume={8},
	number={4},
	pages={1--249},
	year={2002}
}
@inbook{massive_datasets,
	title={Algorithms and Data Structures for Massive Datasets},
	author={Medjedovic, Dzejla and Tahirovic, Emin},
	year={2022},
	publisher={Simon and Schuster},
	pages = {254-255}
}
@inproceedings{source_2Q,
	author = {Johnson, Theodore and Shasha, Dennis},
	title = {2Q: A Low Overhead High Performance Buffer Management Replacement Algorithm},
	year = {1994},
	isbn = {1558601538},
	publisher = {Morgan Kaufmann Publishers Inc.},
	address = {San Francisco, CA, USA},
	booktitle = {Proceedings of the 20th International Conference on Very Large Data Bases},
	pages = {439–450},
	numpages = {12},
	series = {VLDB '94}
}
@inproceedings{buffered_repository_tree,
	author = {Adam L. Buchsbaum and Michael Goldwasser and Suresh Venkatasubramanian and Jeffery R. Westbrook},
	title = {On External Memory Graph Traversal},
	booktitle = {IN PROC. ACM-SIAM SYMP. ON DISCRETE ALGORITHMS},
	year = {2000},
	pages = {859--860},
	publisher = {ACM-SIAM}
}
@article{b_tree_locking,
	author = {Graefe, Goetz},
	title = {A Survey of B-Tree Locking Techniques},
	year = {2010},
	issue_date = {July 2010},
	publisher = {Association for Computing Machinery},
	address = {New York, NY, USA},
	volume = {35},
	number = {3},
	issn = {0362-5915},
	url = {https://doi.org/10.1145/1806907.1806908},
	doi = {10.1145/1806907.1806908},
	abstract = {B-trees have been ubiquitous in database management systems for several decades, and they are used in other storage systems as well. Their basic structure and basic operations are well and widely understood including search, insertion, and deletion. Concurrency control of operations in B-trees, however, is perceived as a difficult subject with many subtleties and special cases. The purpose of this survey is to clarify, simplify, and structure the topic of concurrency control in B-trees by dividing it into two subtopics and exploring each of them in depth.},
	journal = {ACM Trans. Database Syst.},
	month = {jul},
	articleno = {16},
	numpages = {26}
}
@online{reference_b_epsilon_tree,
	author = {{OSCAR Lab}},
	title = {Be-Tree},
	year = {2017},
	publisher = {Github},
	journal = {GitHub repository},
	howpublished = {\url{https://github.com/oscarlab/Be-Tree}},
	commit = {09c6713d4f85bb1b440f8e89e1179c02bdf0b70e},
	url = {https://github.com/oscarlab/Be-Tree},
	urldate = {2022-07-29}
}
@article{b_link_trees,
	author = {Lehman, Philip L. and Yao, s. Bing},
	title = {Efficient Locking for Concurrent Operations on B-Trees},
	year = {1981},
	issue_date = {Dec. 1981},
	publisher = {Association for Computing Machinery},
	address = {New York, NY, USA},
	volume = {6},
	number = {4},
	issn = {0362-5915},
	url = {https://doi.org/10.1145/319628.319663},
	doi = {10.1145/319628.319663},
	abstract = {The B-tree and its variants have been found to be highly useful (both theoretically and in practice) for storing large amounts of information, especially on secondary storage devices. We examine the problem of overcoming the inherent difficulty of concurrent operations on such structures, using a practical storage model. A single additional “link” pointer in each node allows a process to easily recover from tree modifications performed by other concurrent processes. Our solution compares favorably with earlier solutions in that the locking scheme is simpler (no read-locks are used) and only a (small) constant number of nodes are locked by any update process at any given time. An informal correctness proof for our system is given.},
	journal = {ACM Trans. Database Syst.},
	month = {dec},
	pages = {650–670},
	numpages = {21},
	keywords = {multiway search trees, consistencey, database, concurrency controls, locking protocols, data structures, concurrenct algorithms, index organizations, correctness, B-tree}
}
@inproceedings{ycsb,
	author = {Cooper, Brian F. and Silberstein, Adam and Tam, Erwin and Ramakrishnan, Raghu and Sears, Russell},
	title = {Benchmarking Cloud Serving Systems with YCSB},
	year = {2010},
	isbn = {9781450300360},
	publisher = {Association for Computing Machinery},
	address = {New York, NY, USA},
	url = {https://doi.org/10.1145/1807128.1807152},
	doi = {10.1145/1807128.1807152},
	abstract = {While the use of MapReduce systems (such as Hadoop) for large scale data analysis has been widely recognized and studied, we have recently seen an explosion in the number of systems developed for cloud data serving. These newer systems address "cloud OLTP" applications, though they typically do not support ACID transactions. Examples of systems proposed for cloud serving use include BigTable, PNUTS, Cassandra, HBase, Azure, CouchDB, SimpleDB, Voldemort, and many others. Further, they are being applied to a diverse range of applications that differ considerably from traditional (e.g., TPC-C like) serving workloads. The number of emerging cloud serving systems and the wide range of proposed applications, coupled with a lack of apples-to-apples performance comparisons, makes it difficult to understand the tradeoffs between systems and the workloads for which they are suited. We present the "Yahoo! Cloud Serving Benchmark" (YCSB) framework, with the goal of facilitating performance comparisons of the new generation of cloud data serving systems. We define a core set of benchmarks and report results for four widely used systems: Cassandra, HBase, Yahoo!'s PNUTS, and a simple sharded MySQL implementation. We also hope to foster the development of additional cloud benchmark suites that represent other classes of applications by making our benchmark tool available via open source. In this regard, a key feature of the YCSB framework/tool is that it is extensible--it supports easy definition of new workloads, in addition to making it easy to benchmark new systems.},
	booktitle = {Proceedings of the 1st ACM Symposium on Cloud Computing},
	pages = {143–154},
	numpages = {12},
	keywords = {cloud serving database, benchmarking},
	location = {Indianapolis, Indiana, USA},
	series = {SoCC '10}
}
@online{unum_ucsb, title={UCSB: Extending the Ultimate Yahoo NoSQL benchmark}, url={https://unum.cloud/post/2022-03-22-ucsb/}, journal={Unum Blog}, publisher={Unum}, author={Vardanian, Ashot}, year={2022}, month={Mar}, urldate = {2022-07-29}}
@online{ucsb,
	author = {Unum},
	title = {UCSB},
	year = {2022},
	publisher = {GitHub},
	journal = {GitHub repository},
	howpublished = {\url{https://github.com/unum-cloud/UCSB}},
	commit = {17112ded5f58bb74596e5e2482f67512280a4df9},
	url = {https://github.com/unum-cloud/UCSB},
	urldate = {2022-07-29}
}
@online{write_stalls,
	author = {Mahajan, Akanksha},
	title = {Write Stalls},
	year = 2021,
	url = {https://github.com/facebook/rocksdb/wiki/Write-Stalls},
	urldate = {2022-07-29}
}
@online{perconaft,
	author = {Percona},
	title = {PerconaFT},
	year = {2022},
	publisher = {GitHub},
	journal = {GitHub repository},
	howpublished = {\url{https://github.com/percona/PerconaFT}},
	commit = {930d71fcd0ec49ab21c1e83d43a778532017e5cd},
	url = {https://github.com/percona/PerconaFT},
	urldate = {2022-07-29}
}
@online{percona_tokudb, title={Percona TokuDB - Documentation}, url={https://www.percona.com/doc/percona-tokudb/index.html}, journal={Percona}, publisher={Percona}, year={2015}, month={Jul}, urldate = {2022-07-29}}
@online{percona_tokudb_deprecated, title={Heads-Up: TokuDB Support Changes and Future Removal from Percona Server for MySQL 8.0}, url={https://www.percona.com/blog/2021/05/21/tokudb-support-changes-and-future-removal-from-percona-server-for-mysql-8-0}, journal={Percona}, publisher={Percona}, author = {Grimmer, Lenz}, year={2021}, month={May}, urldate = {2022-07-29}}
@online{percona_tokumx, title={Percona TokuMX - Documentation}, url={https://www.percona.com/doc/percona-tokumx/index.html}, journal={Percona}, publisher={Percona}, year={2015}, month={Jul}, urldate = {2022-07-29}}
@online{percona_server,
	author = {Percona},
	title = {Percona Server for MySQL},
	year = {2022},
	publisher = {GitHub},
	journal = {GitHub repository},
	howpublished = {\url{https://github.com/percona/percona-server}},
	commit = {ab380371a37f7be9a4e76dd0483ccd698f928a8c},
	url = {https://github.com/percona/percona-server},
	urldate = {2022-07-29}
}
@online{b_epsilon_vs_cola,
	year = {2021},
	author = {Oleh-Yevhen {Khavrona}},
	month = {July},
	title = {B-epsilon-tree and cache-oblivious lookahead array: a comparative study of two write-optimised data structures},
	url = {http://essay.utwente.nl/87368/},
	urldate = {2022-07-29}
}

@article{fractal_vs_lsm,
	title={A comparison of fractal trees to log-structured merge (LSM) trees},
	author={Kuszmaul, Bradley C},
	journal={Tokutek White Paper},
	year={2014}
}
@inproceedings{tokudb_vs_rocksdb,
	author = {Chen, Chen and Zhong, Wenshao and Wu, Xingbo},
	title = {Building an Efficient Key-Value Store in a Flexible Address Space},
	year = {2022},
	isbn = {9781450391627},
	publisher = {Association for Computing Machinery},
	address = {New York, NY, USA},
	url = {https://doi.org/10.1145/3492321.3519555},
	doi = {10.1145/3492321.3519555},
	booktitle = {Proceedings of the Seventeenth European Conference on Computer Systems},
	pages = {51–68},
	numpages = {18},
	keywords = {key-value store, storage, address space},
	location = {Rennes, France},
	series = {EuroSys '22}
}
@online{tokudb_vs_rocksdb_2, title={Comparing TokuDB, RocksDB and InnoDB Performance on Intel(R) Xeon(R) Gold 6140 CPU}, url={https://minervadb.com/index.php/2018/08/06/comparing-tokudb-rocksdb-and-innodb-performance-on-intelr-xeonr-gold-6140-cpu/}, journal={MinervaDB}, publisher={MinervaDB}, year={2018}, month={Aug}, author={Iyer, Shiv}, urldate = {2022-07-29}}
@article{myrocks,
	author = {Matsunobu, Yoshinori and Dong, Siying and Lee, Herman},
	title = {MyRocks: LSM-Tree Database Storage Engine Serving Facebook's Social Graph},
	year = {2020},
	issue_date = {August 2020},
	publisher = {VLDB Endowment},
	volume = {13},
	number = {12},
	issn = {2150-8097},
	url = {https://doi.org/10.14778/3415478.3415546},
	doi = {10.14778/3415478.3415546},
	journal = {Proc. VLDB Endow.},
	month = {aug},
	pages = {3217–3230},
	numpages = {14}
}
@article{optimistic_lock_coupling,
	author    = {Viktor Leis and
	Michael Haubenschild and
	Thomas Neumann},
	title     = {Optimistic Lock Coupling: {A} Scalable and Efficient General-Purpose
	Synchronization Method},
	journal   = {{IEEE} Data Eng. Bull.},
	volume    = {42},
	number    = {1},
	pages     = {73--84},
	year      = {2019},
	url       = {http://sites.computer.org/debull/A19mar/p73.pdf},
	timestamp = {Tue, 10 Mar 2020 16:23:50 +0100},
	biburl    = {https://dblp.org/rec/journals/debu/LeisH019.bib},
	bibsource = {dblp computer science bibliography, https://dblp.org}
}
@article{buffer_managers,
	author = {Effelsberg, Wolfgang and Haerder, Theo},
	title = {Principles of Database Buffer Management},
	year = {1984},
	issue_date = {Dec. 1984},
	publisher = {Association for Computing Machinery},
	address = {New York, NY, USA},
	volume = {9},
	number = {4},
	issn = {0362-5915},
	url = {https://doi.org/10.1145/1994.2022},
	doi = {10.1145/1994.2022},
	journal = {ACM Trans. Database Syst.},
	month = {dec},
	pages = {560–595},
	numpages = {36}
}
@inproceedings{hashtable_buffer_slow,
	author = {Harizopoulos, Stavros and Abadi, Daniel J. and Madden, Samuel and Stonebraker, Michael},
	title = {OLTP through the Looking Glass, and What We Found There},
	year = {2008},
	isbn = {9781605581026},
	publisher = {Association for Computing Machinery},
	address = {New York, NY, USA},
	url = {https://doi.org/10.1145/1376616.1376713},
	doi = {10.1145/1376616.1376713},
	booktitle = {Proceedings of the 2008 ACM SIGMOD International Conference on Management of Data},
	pages = {981–992},
	numpages = {12},
	keywords = {online transaction processing, dbms architecture, main memory transaction processing, oltp},
	location = {Vancouver, Canada},
	series = {SIGMOD '08}
}
@inproceedings{leanstore,  author={Leis, Viktor and Haubenschild, Michael and Kemper, Alfons and Neumann, Thomas},  booktitle={2018 IEEE 34th International Conference on Data Engineering (ICDE)},   title={LeanStore: In-Memory Data Management beyond Main Memory},   year={2018},  volume={},  number={},  pages={185-196},  doi={10.1109/ICDE.2018.00026}}